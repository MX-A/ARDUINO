#include "MsTimer2.h"
#include "JY901.h"

/*****************************************************************************
程序名： GPS提取经纬度
RTrobot.org
禁止用于商业行为                              
*****************************************************************************/
#include <Wire.h>
#include "ClosedCube_SHT3XD.h"

ClosedCube_SHT3XD sht3xd;

unsigned char Re_buf[15];
unsigned char sign=0;
typedef struct
{
    uint32_t P;
    uint16_t Temp;
    uint16_t Hum;
    uint16_t Alt;
} bme;
int GPS_Serial_Start_flag=0;
String gpsdata = "";
char fixmode;
String longitude="";
String latitude = "";

void GPGSA_Analysis(String buf)
{
  int flag=0;
  int fixmode_flag=0;
  for(int i=0;i<13;i++)
  {
    if(buf[i]==',')
    { 
      flag++;
    }

    //纬度起始
    if(flag==2&&fixmode_flag==0)
    {
      fixmode=buf[i+1];
      fixmode_flag=1;
    }
  }
  //  Serial.println(longitude);
}

void GPGGA_Analysis(String buf)
{
  int latitude_data_start=0;
  int latitude_data_stop=0;
  int latitude_flag=0;
  int longitude_data_start=0;
  int longitude_data_stop=0;
  int longitude_flag=0;
  int flag=0;
  longitude="";
  latitude = "";

  for(int i=0;i<50;i++)
  {
    if(buf[i]==',')
    { 
      flag++;
    }

    //纬度起始
    if(flag==2&&latitude_flag==0)
    {
      latitude_data_start=i+1;
      latitude_flag=1;
    }

    //纬度结束
    if(flag==3&&latitude_flag==1)
    {
      latitude_data_stop=i;
      latitude_flag=2;
    }

    //经度起始
    if(flag==4&&longitude_flag==0)
    {
      longitude_data_start=i+1;
      longitude_flag=1;
    }
    
    //经度结束  
    if(flag==5&&longitude_flag==1)
    { 
      longitude_data_stop=i;
      longitude_flag=2;
    }
  }

  for(int i=latitude_data_start;i<latitude_data_stop;i++)
  {
    latitude+=buf[i];
  }

  for(int i=longitude_data_start;i<longitude_data_stop;i++)
  {
    longitude+=buf[i];
  }
}

void setup()
{
  MsTimer2::set(50, onTimer);
  Serial.begin(9600);
  Serial2.begin(9600);
  sht3xd.begin(0x44);
  Serial1.begin(115200);
  Serial3.begin(9600);  
  delay(1);   
}
     
void loop()
{
  printResult("温度，湿度", sht3xd.readTempAndHumidity(REPEATABILITY_LOW,MODE_CLOCK_STRETCH, 50)); 
  delay(500);
   down();
   sun();
   delay(500);
  serial2Event() ;
  JY90();
  delay(200);
  MsTimer2::start();
  delay(500);
  MsTimer2::stop();
}

void printResult(String text, SHT3XD result) {
  if (result.error == NO_ERROR) {
    Serial.print(text);
    Serial.print(": T=");
    Serial.print(result.t);
    Serial.print("C, RH=");
    Serial.print(result.rh);
    Serial.println("%");
  }
  else {
    Serial.print(text);
    Serial.print(": [ERROR] Code #");
    Serial.println(result.error);
  }
}
void JY90()
{
   //print received data. Data was received in serialEvent;
//  Serial.print("Time:20");Serial.print(JY901.stcTime.ucYear);Serial.print("-");Serial.print(JY901.stcTime.ucMonth);Serial.print("-");Serial.print(JY901.stcTime.ucDay);
//  Serial.print(" ");Serial.print(JY901.stcTime.ucHour);Serial.print(":");Serial.print(JY901.stcTime.ucMinute);Serial.print(":");Serial.println((float)JY901.stcTime.ucSecond+(float)JY901.stcTime.usMiliSecond/1000);
               
  Serial.print("加速度:");Serial.print((float)JY901.stcAcc.a[0]/32768*16);Serial.print(" ");Serial.print((float)JY901.stcAcc.a[1]/32768*16);Serial.print(" ");Serial.println((float)JY901.stcAcc.a[2]/32768*16);
  
  Serial.print("角速度:");Serial.print((float)JY901.stcGyro.w[0]/32768*2000);Serial.print(" ");Serial.print((float)JY901.stcGyro.w[1]/32768*2000);Serial.print(" ");Serial.println((float)JY901.stcGyro.w[2]/32768*2000);
  
  Serial.print("角度:");Serial.print((float)JY901.stcAngle.Angle[0]/32768*180);Serial.print(" ");Serial.print((float)JY901.stcAngle.Angle[1]/32768*180);Serial.print(" ");Serial.println((float)JY901.stcAngle.Angle[2]/32768*180);
  
  Serial.print("磁场:");Serial.print(JY901.stcMag.h[0]);Serial.print(" ");Serial.print(JY901.stcMag.h[1]);Serial.print(" ");Serial.println(JY901.stcMag.h[2]);
  
//  Serial.print("Pressure:");Serial.print(JY901.stcPress.lPressure);Serial.print(" ");Serial.println((float)JY901.stcPress.lAltitude/100);
  
 // Serial.print("DStatus:");Serial.print(JY901.stcDStatus.sDStatus[0]);Serial.print(" ");Serial.print(JY901.stcDStatus.sDStatus[1]);Serial.print(" ");Serial.print(JY901.stcDStatus.sDStatus[2]);Serial.print(" ");Serial.println(JY901.stcDStatus.sDStatus[3]);
  
//  Serial.print("Longitude:");Serial.print(JY901.stcLonLat.lLon/10000000);Serial.print("Deg");Serial.print((double)(JY901.stcLonLat.lLon % 10000000)/1e5);Serial.print("m Lattitude:");
//  Serial.print(JY901.stcLonLat.lLat/10000000);Serial.print("Deg");Serial.print((double)(JY901.stcLonLat.lLat % 10000000)/1e5);Serial.println("m");
  
//  Serial.print("GPSHeight:");Serial.print((float)JY901.stcGPSV.sGPSHeight/10);Serial.print("m GPSYaw:");Serial.print((float)JY901.stcGPSV.sGPSYaw/10);Serial.print("Deg GPSV:");Serial.print((float)JY901.stcGPSV.lGPSVelocity/1000);Serial.println("km/h");
  
  Serial.println("");
  }

  void serial2Event() 
{
  while (Serial2.available()) 
  {
    JY901.CopeSerialData(Serial2.read()); //Call JY901 data cope function
  }
}

void down()
{
  int i =0,counter=0;
  Serial3.write(0XA5);
  Serial3.write(0X51);
  Serial3.write(0XF6);
  for(i=0;i<9;i++)
  {  
       if(sign==0)
        {
      Re_buf[counter]=(unsigned char)Serial3.read();
      if(counter==0&&Re_buf[0]!=0x5A) return 0;      // 检查帧头         
      counter++;  
        }     
      if(counter==9)                //接收到数据
      {    
         counter=0;                 //重新赋值，准备下一帧数据的接收 
         sign=1;
      }      
     
  }
  }
void sun()
{
   bme Bme;
  if(sign)
  {  
        if( 0X5A ==Re_buf[0] )        //检查帧头，帧尾
     {     
       Bme.Alt=(Re_buf[4]<<24)|(Re_buf[5]<<16)|(Re_buf[6]<<8)|(Re_buf[7]);
       Serial.print(" 光照:");
       Serial.print((float) Bme.Alt/100);
       Serial.println("lux");
    
    sign=0;        
   }
  }
}

/*void onTimer()
{
   while(Serial.available()) {   
       if(sign==0)
        {
      Re_buf[counter]=(unsigned char)Serial.read();
      if(counter==0&&Re_buf[0]!=0x5A) return 0;      // 检查帧头         
      counter++;  
        }     
      if(counter==9)                //接收到数据
      {    
         counter=0;                 //重新赋值，准备下一帧数据的接收 
         sign=1;
      }      
      }
  }*/
  void onTimer()
  {
    char serial_data; 
     while(Serial1.available() > 0) 
  {
    serial_data = Serial1.read();
    //判断数据起始
    if(serial_data=='$')
    {
      GPS_Serial_Start_flag=1;
    }
    if(GPS_Serial_Start_flag==1)
    {
      gpsdata +=serial_data;
      //是否接收完成一行数据 
      if( serial_data == '\n')
      {
        if(gpsdata[0]=='$'&&gpsdata[1]=='G'&&gpsdata[2]=='N'&&gpsdata[3]=='G'&&gpsdata[4]=='G'&&gpsdata[5]=='A')
        {   
          Serial.print("已经接收到GPS数据但数据错误\n");
          GPGGA_Analysis(gpsdata);
        }
        else
        {
         
        }
        if(gpsdata[0]=='$'&&gpsdata[1]=='G'&&gpsdata[2]=='N'&&gpsdata[3]=='G'&&gpsdata[4]=='S'&&gpsdata[5]=='A')
        {   
          GPGSA_Analysis(gpsdata);
        }
        GPS_Serial_Start_flag=0;
        gpsdata = "";
      }
    }
  }
  if(latitude>0||longitude>0){
    Serial.print("latitude:");
    Serial.print(latitude);
    Serial.print("\t");
    Serial.print("longitude:");
    Serial.println(longitude);}
    }
